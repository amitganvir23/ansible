---
- hosts: win
  gather_facts: yes
  vars:
    ram1: "1024" #MB
    dotnet_release: 393295
    dotnet_release4_6:
      - 393295
      - 393297
      - 528049    
  tasks:
  - name: Creating A directory
    win_file:
      path: C:\Amit\app
      state: directory

  - name: Creating a empty file
    win_file:
      path: C:\Amit\app/index.html
      state: touch

  - name: Install IIS (Web-Server only)
    win_feature:
      name: Web-Server
      state: present

  - name: Install IIS (Web-Server and Web-Common-Http)
    win_feature:
      name:
      - Web-Server
      - Web-Common-Http
      state: present

      #  - name: Install NET-Framework-Core from file
      #win_feature:
      # name: NET-Framework-Core
      #    source: C:\Temp\iso\sources\sxs
      # state: present

  - name: Install IIS Web-Server with sub features and management tools
    win_feature:
      name: Web-Server
      state: present
      include_sub_features: yes
      include_management_tools: yes
    register: win_feature

  - name: Reboot if installing Web-Server feature requires it
    win_reboot:
    when: win_feature.reboot_required

  - name: Copy folder contents recursively
    win_copy:
      src: raj
      dest: C:\inetpub\wwwroot
 ######### 7zip    ######### 
  - name: Checking 7zip file
    win_stat:
      path: C:\7zip.msi
    register: stat_file

  - name: Download 7zip
    win_get_url:
      url: http://7-zip.org/a/7z1604-x64.msi
      dest: C:\7zip.msi
    when: stat_file.stat.exists == False

  - name: Check if 7-Zip is already installed
    win_stat: path='C:\Program Files\7-Zip\7z.exe'
    register: zip_installed

  - name: Install 7zip
    win_package:
      path: C:\7zip.msi
      creates_path: C:\Program Files\7-Zip\7z.exe
      state: present
    when: zip_installed.stat.exists == False

######### Redis #########
  - name: Checking redis file
    win_stat:
      path: C:\redis.msi
    register: stat_file

  - name: Download redis
    win_get_url:
      url: https://github.com/microsoftarchive/redis/releases/download/win-2.8.2104/Redis-x64-2.8.2104.msi
      dest: C:\redis.msi
    when: stat_file.stat.exists == False
    
  - name: Check if Redis is already installed
    win_stat: path='C:\Program Files\Redis\redis-server.exe'
    register: zip_installed

  - name: Install 7zip
    win_package:
      path: C:\redis.msi
      state: present
    when: zip_installed.stat.exists == False

### System INFO
  ## disk info
  - name: Get disk facts
    win_disk_facts:

  - name: Convert first system disk into various formats
    debug:
      msg: 'Disk Size: {{ disksize_gb }}'
    vars:
      # Get first system disk
      disk: '{{ ansible_facts.disks|selectattr("system_disk")|first }}'
      # Show disk size in Gigabytes
      disksize_gb: '{{ (disk.size/1000|pow(3))|round|int }} GB'  # returns "240 GB" (value in GB)
   
  ## OS version
  - name: Distribution
    debug: 
      msg: "{{ ansible_distribution }}"
      
  ## RAM
  - name: Checking RAM memory
    win_shell: "wmic MemoryChip get Capacity"
    register: ram_state
  - name: RAM debug
    debug:
      msg: "{{ ram_state }}"  
  ## RAM2 code
  - name: Checking RAM memory
    win_shell: "wmic MemoryChip get Capacity|select-string -Pattern '[0-9]'"
    register: ram_state
  - shell: "echo '{{ ram_state.stdout }}' | grep [0-9] | sed 's/ //g'|tr -d '\"'"
    delegate_to: localhost
    register: ram_state1
  - shell: "echo {{ ram_state1.stdout }} / 1024 / 1024 |bc"
    delegate_to: localhost
    register: ram_size
  - name: Checking Ram
    fail:
      msg: "RAM is LESS {{ ram_size.stdout }}MB"
    when: ram_size.stdout < ram1
      #when: ram_state1.stdout < ram3
      
## IIS version checking
  - name: Copy iis version checker script 
    win_copy:
      src: iis_version_check.ps1
      dest: C:\iis_version_check.ps1
  - name: Checking Required IIS version 
    win_shell: C:\iis_version_check.ps1
    register: iis_result
  - debug:
      msg: "Current {{ iis_result.stdout }}"
      
## DOT-NET version checking   
  - name: Copy DOT-NET version checker script
    win_copy:
      src: dotnet_version_check.ps1
      dest: C:\dotnet_version_check.ps1
  - name: Checking Required DOT-NET version
    win_shell: 'C:\dotnet_version_check.ps1 {{ dotnet_release }}'
    register: dotnet_result
  - debug:
      msg: "{{ dotnet_result.stdout }}"
      
## DOT-NET version checking with multiple version
  - name: Copy DOT-NET version checker script
    win_copy:
      src: dotnet_version_check2.ps1
      dest: C:\dotnet_version_check2.ps1
  - name: Checking Required DOT-NET version
    win_shell: 'C:\dotnet_version_check2.ps1 {{ dotnet_release4_6[0] }} {{ dotnet_release4_6[2] }}'
    register: dotnet_result
  - debug:
      msg: "{{ dotnet_result.stdout }}"
